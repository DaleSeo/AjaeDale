---
import type { CollectionEntry } from "astro:content";
import BookmarkIcon from "../icons/Bookmark.astro";
import Share2Icon from "../icons/Share2.astro";
import type { Lang } from "../utils/i18n";
import { getLocalizedUrl, getLangFromUrl } from "../utils/i18n";

interface Props {
  gag: CollectionEntry<"gags">;
  lang?: Lang;
}

// If lang prop is not provided, detect from URL
const detectedLang = getLangFromUrl(Astro.url);
const { gag, lang = detectedLang } = Astro.props;
---

<div
  class="card bg-card border-border hover-lift group rounded-lg border"
  data-gag-slug={gag.data.slug}
>
  <div class="p-6">
    <div class="mb-4 flex items-start justify-between">
      <div class="flex flex-wrap gap-2">
        {
          gag.data.tags.map((tag: string) => (
            <a
              href={getLocalizedUrl(`/tags/${tag}`, lang)}
              class="bg-primary/10 text-primary hover:bg-primary/20 inline-block rounded-full px-3 py-1 text-sm font-medium transition-colors"
            >
              #{tag}
            </a>
          ))
        }
        <span
          class="inline-block rounded-full px-3 py-1 text-sm font-medium"
          class:list={[
            gag.data.lang === "ko"
              ? "bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300"
              : "bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300",
          ]}
        >
          {gag.data.lang === "ko" ? "🇰🇷 한국어" : "🇺🇸 English"}
        </span>
      </div>
      <div class="flex items-center space-x-2">
        <button
          class="save-btn hover:bg-accent rounded-md p-2 transition-colors"
          data-gag={JSON.stringify({
            slug: gag.data.slug,
            title: gag.data.title,
            description: gag.data.description,
            tags: gag.data.tags,
          })}
          aria-label="저장"
        >
          <BookmarkIcon class="bookmark-icon h-4 w-4" />
          <BookmarkIcon
            class="bookmark-check-icon text-primary hidden h-4 w-4"
            fill="currentColor"
          />
        </button>
        <button
          class="share-btn hover:bg-accent rounded-md p-2 transition-colors"
          data-content={`${gag.data.title}${gag.data.description ? " - " + gag.data.description : ""}`}
          data-slug={gag.data.slug}
          aria-label="공유"
        >
          <Share2Icon size={16} />
        </button>
      </div>
    </div>

    <div class="mb-4">
      <a href={getLocalizedUrl(`/gags/${gag.data.slug}`, lang)}>
        <h2
          class="text-foreground hover:text-primary mb-2 cursor-pointer text-lg font-bold transition-colors"
        >
          {gag.data.title}
        </h2>
      </a>
    </div>
  </div>
</div>

<style>
  .hover-lift {
    transition:
      transform 0.2s ease-in-out,
      box-shadow 0.2s ease-in-out;
  }
  .hover-lift:hover {
    transform: translateY(-4px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  }
</style>

<script>
  // localStorage 키
  const STORAGE_KEY = "ajae-gag-saved";

  // 저장된 개그 가져오기
  function getSavedGags(): any[] {
    const saved = localStorage.getItem(STORAGE_KEY);
    return saved ? JSON.parse(saved) : [];
  }

  // 개그 저장/제거
  function toggleSaveGag(gag: any): boolean {
    const saved = getSavedGags();
    const index = saved.findIndex((item: any) => item.slug === gag.slug);

    if (index > -1) {
      saved.splice(index, 1);
    } else {
      saved.push(gag);
    }

    localStorage.setItem(STORAGE_KEY, JSON.stringify(saved));
    return index === -1;
  }

  // 개그가 저장되었는지 확인
  function isGagSaved(gagSlug: string): boolean {
    const saved = getSavedGags();
    return saved.some((gag: any) => gag.slug === gagSlug);
  }

  // UI 업데이트
  function updateSaveButtons(): void {
    document.querySelectorAll(".save-btn").forEach((btn: Element) => {
      const htmlBtn = btn as HTMLElement;
      const gag = JSON.parse(htmlBtn.dataset.gag || "{}");
      const bookmarkIcon = btn.querySelector(".bookmark-icon");
      const bookmarkCheckIcon = btn.querySelector(".bookmark-check-icon");

      if (isGagSaved(gag.slug)) {
        bookmarkIcon?.classList.add("hidden");
        bookmarkCheckIcon?.classList.remove("hidden");
      } else {
        bookmarkIcon?.classList.remove("hidden");
        bookmarkCheckIcon?.classList.add("hidden");
      }
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    updateSaveButtons();

    // 저장 버튼 이벤트
    document.querySelectorAll(".save-btn").forEach((btn: Element) => {
      btn.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        const htmlBtn = btn as HTMLElement;
        const gag = JSON.parse(htmlBtn.dataset.gag || "{}");
        toggleSaveGag(gag);
        updateSaveButtons();
      });
    });

    // 공유 버튼 이벤트
    document.querySelectorAll(".share-btn").forEach((btn: Element) => {
      btn.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        const htmlBtn = btn as HTMLElement;
        const content = htmlBtn.dataset.content || "";
        const slug = htmlBtn.dataset.slug || "";

        // Detect language from current URL
        const currentPath = window.location.pathname;
        const isEnglish = currentPath.startsWith("/en/");
        const urlPath = isEnglish ? `/en/gags/${slug}` : `/gags/${slug}`;
        const url = `${window.location.origin}${urlPath}`;

        if (navigator.share) {
          navigator.share({
            title: "아재개그",
            text: content,
            url: url,
          });
        } else {
          navigator.clipboard.writeText(`${content}\n${url}`).then(() => {
            const originalHtml = htmlBtn.innerHTML;
            htmlBtn.innerHTML = "✓";
            setTimeout(() => {
              htmlBtn.innerHTML = originalHtml;
            }, 1000);
          });
        }
      });
    });

    // storage 이벤트 리스너
    window.addEventListener("storage", (e: StorageEvent) => {
      if (e.key === STORAGE_KEY) {
        updateSaveButtons();
      }
    });
  });
</script>
