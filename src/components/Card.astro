---
import type { CollectionEntry } from "astro:content";
import BookmarkIcon from "../icons/Bookmark.astro";
import Share2Icon from "../icons/Share2.astro";
import type { Lang } from "../utils/i18n";
import {
  getLocalizedUrl,
  getLangFromUrl,
  useTranslations,
} from "../utils/i18n";

interface Props {
  gag: CollectionEntry<"gags">;
  lang?: Lang;
  variant?: "compact" | "featured";
}

// lang prop이 제공되지 않으면 URL에서 언어 감지
const detectedLang = getLangFromUrl(Astro.url);
const { gag, lang = detectedLang, variant = "compact" } = Astro.props;
const t = useTranslations(lang);

// variant에 따른 스타일 설정
const isFeatured = variant === "featured";
const containerClasses = isFeatured
  ? "min-h-[220px]"
  : "min-h-[200px]";
const cardClasses = isFeatured
  ? "border-2 p-6 shadow-lg md:p-8"
  : "border p-6";
const iconSize = isFeatured ? 20 : 16;
const iconClass = isFeatured ? "h-5 w-5" : "h-4 w-4";
const titleClass = isFeatured
  ? "text-lg font-bold md:text-xl"
  : "text-lg font-bold";
const descClass = isFeatured
  ? "text-base tracking-wider opacity-50 transition-opacity hover:opacity-70 md:text-lg"
  : "text-base tracking-wider opacity-50 transition-opacity hover:opacity-70";
const backTitleClass = isFeatured
  ? "text-lg font-bold md:text-xl"
  : "text-lg font-bold";
const backDescClass = isFeatured
  ? "text-lg font-semibold md:text-xl"
  : "text-xl font-semibold";
const detailBtnClass = isFeatured
  ? "rounded-lg px-6 py-3 font-medium"
  : "rounded-md px-4 py-2 text-sm font-medium";
---

<div
  class="group relative cursor-pointer"
  style="perspective: 1000px;"
  data-gag-slug={gag.data.slug}
>
  <div
    class={`card-flipper relative transition-transform duration-700 transform-3d group-[.flipped]:rotate-y-180 ${containerClasses}`}
    style="transform-style: preserve-3d;"
  >
    <!-- 카드 앞면 -->
    <div class="card-front absolute inset-0 backface-hidden">
      <div class={`bg-card border-border h-full rounded-lg ${cardClasses}`}>
          <div class="mb-4 flex items-start justify-between">
            <div class="flex flex-wrap gap-2">
              {
                gag.data.tags.map((tag: string) => (
                  <a
                    href={getLocalizedUrl(`/tags/${tag}`, lang)}
                    class="bg-primary/10 text-primary hover:bg-primary/20 inline-block rounded-full px-3 py-1 text-sm font-medium transition-colors"
                    data-no-flip="true"
                  >
                    #{tag}
                  </a>
                ))
              }
            </div>
            <div class="flex items-center space-x-2">
              <button
                class="save-btn hover:bg-accent rounded-md p-2 transition-colors"
                data-gag={JSON.stringify({
                  slug: gag.data.slug,
                  title: gag.data.title,
                  description: gag.data.description,
                  tags: gag.data.tags,
                })}
                aria-label={t("저장", "Save")}
                data-no-flip="true"
              >
                <BookmarkIcon class={`bookmark-icon ${iconClass}`} />
                <BookmarkIcon
                  class={`bookmark-check-icon text-primary hidden ${iconClass}`}
                  fill="currentColor"
                />
              </button>
              <button
                class="share-btn hover:bg-accent rounded-md p-2 transition-colors"
                data-content={`${gag.data.title}${gag.data.description ? " - " + gag.data.description : ""}`}
                data-slug={gag.data.slug}
                aria-label={t("공유", "Share")}
                data-no-flip="true"
              >
                <Share2Icon size={iconSize} />
              </button>
            </div>
          </div>

          <div class="mb-4">
            <h3 class={`text-foreground mb-2 ${titleClass}`}>
              {gag.data.title}
            </h3>
            {
              gag.data.description && (
                <p class={`text-muted-foreground mt-3 font-mono ${descClass}`}>
                  {gag.data.description.replace(
                    /[가-힣ㄱ-ㅎㅏ-ㅣa-zA-Z0-9]/g,
                    "●",
                  )}
                </p>
              )
            }
          </div>
      </div>
    </div>

    <!-- 카드 뒷면 -->
    <div class="card-back absolute inset-0 rotate-y-180 backface-hidden">
      <div class={`bg-card border-border h-full rounded-lg ${cardClasses}`}>
          <div class="mb-4 flex items-start justify-between">
            <div class="flex-1">
              <h3 class={`text-foreground mb-2 ${backTitleClass}`}>
                {gag.data.title}
              </h3>
              {
                gag.data.description && (
                  <p class={`text-primary mt-4 ${backDescClass}`}>
                    {gag.data.description}
                  </p>
                )
              }
            </div>
            <div class="flex items-center space-x-2">
              <button
                class="save-btn hover:bg-accent rounded-md p-2 transition-colors"
                data-gag={JSON.stringify({
                  slug: gag.data.slug,
                  title: gag.data.title,
                  description: gag.data.description,
                  tags: gag.data.tags,
                })}
                aria-label={t("저장", "Save")}
                data-no-flip="true"
              >
                <BookmarkIcon class={`bookmark-icon ${iconClass}`} />
                <BookmarkIcon
                  class={`bookmark-check-icon text-primary hidden ${iconClass}`}
                  fill="currentColor"
                />
              </button>
              <button
                class="share-btn hover:bg-accent rounded-md p-2 transition-colors"
                data-content={`${gag.data.title}${gag.data.description ? " - " + gag.data.description : ""}`}
                data-slug={gag.data.slug}
                aria-label={t("공유", "Share")}
                data-no-flip="true"
              >
                <Share2Icon size={iconSize} />
              </button>
            </div>
          </div>
          <div class="mt-6 flex justify-center">
            <a
              href={getLocalizedUrl(`/gags/${gag.data.slug}`, lang)}
              class={`bg-primary text-primary-foreground hover:bg-primary/90 inline-block transition-colors ${detailBtnClass}`}
              data-no-flip="true"
            >
              {t("자세히 보기", "View Details")}
            </a>
          </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { initGagInteractions } from "../scripts/gagInteractions";

  // 개그 상호작용 초기화 (북마크, 공유 등)
  initGagInteractions();

  // 플립 카드 상호작용
  document.addEventListener("DOMContentLoaded", () => {
    const initCardFlip = () => {
      const cards = document.querySelectorAll("[data-gag-slug]");

      cards.forEach((card) => {
        // 중복 방지를 위해 기존 리스너 제거
        const newCard = card.cloneNode(true) as HTMLElement;
        card.parentNode?.replaceChild(newCard, card);

        newCard.addEventListener("click", (e) => {
          const target = e.target as HTMLElement;

          // 버튼이나 링크 등 상호작용 요소를 클릭한 경우 플립하지 않음
          if (
            target.closest("[data-no-flip]") ||
            target.closest("button") ||
            target.closest("a") ||
            target.tagName === "BUTTON" ||
            target.tagName === "A"
          ) {
            return;
          }

          // 카드 뒤집기 토글
          newCard.classList.toggle("flipped");
        });
      });
    };

    // 첫 로드 시 초기화
    initCardFlip();

    // Astro View Transitions 사용 시 재초기화
    document.addEventListener("astro:after-swap", initCardFlip);
  });
</script>
