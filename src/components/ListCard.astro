---
import type { CollectionEntry } from "astro:content";
import BookmarkIcon from "../icons/Bookmark.astro";
import Share2Icon from "../icons/Share2.astro";
import type { Lang } from "../utils/i18n";
import {
  getLocalizedUrl,
  getLangFromUrl,
  useTranslations,
} from "../utils/i18n";
import { tagToSlug } from "../utils/tagUtils";

interface Props {
  gag: CollectionEntry<"gags">;
  lang?: Lang;
}

// lang prop이 제공되지 않으면 URL에서 언어 감지
const detectedLang = getLangFromUrl(Astro.url);
const { gag, lang = detectedLang } = Astro.props;
const t = useTranslations(lang);
---

<div
  class="group cursor-pointer"
  style="perspective: 1000px;"
  data-gag-slug={gag.data.slug}
>
  <div
    class="card-flipper grid transition-transform duration-700 transform-3d group-[.flipped]:rotate-y-180"
    style="transform-style: preserve-3d;"
  >
    <!-- 카드 앞면 -->
    <div class="card-front backface-hidden" style="grid-area: 1 / 1;">
      <div class="bg-card border-border hover:border-primary/50 hover:shadow-md rounded-lg border p-6">
        <div class="mb-4 flex items-start justify-between">
          <div class="flex flex-wrap gap-2">
            {
              gag.data.tags.map((tag: string) => (
                <a
                  href={getLocalizedUrl(`/tags/${tagToSlug(tag)}`, lang)}
                  class="bg-primary/10 text-primary hover:bg-primary/20 inline-block rounded-full px-3 py-1 text-sm font-medium transition-colors"
                  data-no-flip="true"
                >
                  #{tag}
                </a>
              ))
            }
          </div>
          <div class="flex items-center gap-2">
            <button
              class="save-btn hover:bg-accent rounded-md p-2 transition-colors"
              data-gag={JSON.stringify({
                slug: gag.data.slug,
                title: gag.data.title,
                description: gag.data.description,
                tags: gag.data.tags,
              })}
              aria-label={t("저장", "Save")}
              data-no-flip="true"
            >
              <BookmarkIcon class="bookmark-icon h-4 w-4" />
              <BookmarkIcon
                class="bookmark-check-icon text-primary hidden h-4 w-4"
                fill="currentColor"
              />
            </button>
            <button
              class="share-btn hover:bg-accent rounded-md p-2 transition-colors"
              data-content={`${gag.data.title}${gag.data.description ? " - " + gag.data.description : ""}`}
              data-slug={gag.data.slug}
              aria-label={t("공유", "Share")}
              data-no-flip="true"
            >
              <Share2Icon size={16} />
            </button>
          </div>
        </div>

        <div class="mb-4">
          <h3 class="text-foreground mb-2 text-lg font-bold">
            {gag.data.title}
          </h3>
          {
            gag.data.description && (
              <p class="text-muted-foreground mt-3 font-mono text-base tracking-wider opacity-50 transition-opacity hover:opacity-70">
                {gag.data.description.replace(
                  /[가-힣ㄱ-ㅎㅏ-ㅣa-zA-Z0-9]/g,
                  "●",
                )}
              </p>
            )
          }
        </div>
      </div>
    </div>

    <!-- 카드 뒷면 -->
    <div
      class="card-back rotate-y-180 backface-hidden"
      style="grid-area: 1 / 1;"
    >
      <div class="bg-card border-border hover:border-primary/50 hover:shadow-md rounded-lg border p-6">
        <div class="mb-4 flex items-start justify-between">
          <div class="flex-1">
            <h3 class="text-foreground mb-2 text-lg font-bold">
              {gag.data.title}
            </h3>
            {
              gag.data.description && (
                <p class="text-primary mt-4 text-xl font-semibold">
                  {gag.data.description}
                </p>
              )
            }
          </div>
          <div class="flex items-center gap-2">
            <button
              class="save-btn hover:bg-accent rounded-md p-2 transition-colors"
              data-gag={JSON.stringify({
                slug: gag.data.slug,
                title: gag.data.title,
                description: gag.data.description,
                tags: gag.data.tags,
              })}
              aria-label={t("저장", "Save")}
              data-no-flip="true"
            >
              <BookmarkIcon class="bookmark-icon h-4 w-4" />
              <BookmarkIcon
                class="bookmark-check-icon text-primary hidden h-4 w-4"
                fill="currentColor"
              />
            </button>
            <button
              class="share-btn hover:bg-accent rounded-md p-2 transition-colors"
              data-content={`${gag.data.title}${gag.data.description ? " - " + gag.data.description : ""}`}
              data-slug={gag.data.slug}
              aria-label={t("공유", "Share")}
              data-no-flip="true"
            >
              <Share2Icon size={16} />
            </button>
          </div>
        </div>
        <div class="mt-6 flex justify-center">
          <a
            href={getLocalizedUrl(`/gags/${gag.data.slug}`, lang)}
            class="bg-primary text-primary-foreground hover:bg-primary/90 inline-block rounded-md px-4 py-2 text-sm font-medium transition-colors"
            data-no-flip="true"
          >
            {t("자세히 보기", "View Details")}
          </a>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { initGagInteractions } from "../scripts/gagInteractions";

  // 개그 상호작용 초기화 (북마크, 공유 등)
  initGagInteractions();

  // 플립 카드 상호작용
  document.addEventListener("astro:page-load", () => {
    const initCardFlip = () => {
      const cards = document.querySelectorAll("[data-gag-slug]");

      cards.forEach((card) => {
        // 중복 방지를 위해 기존 리스너 제거
        const newCard = card.cloneNode(true) as HTMLElement;
        card.parentNode?.replaceChild(newCard, card);

        newCard.addEventListener("click", (e) => {
          const target = e.target as HTMLElement;

          // 버튼이나 링크 등 상호작용 요소를 클릭한 경우 플립하지 않음
          if (
            target.closest("[data-no-flip]") ||
            target.closest("button") ||
            target.closest("a") ||
            target.tagName === "BUTTON" ||
            target.tagName === "A"
          ) {
            return;
          }

          // 카드 뒤집기 토글
          newCard.classList.toggle("flipped");
        });
      });
    };

    initCardFlip();
  });
</script>
