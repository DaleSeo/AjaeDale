---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../../../layouts/Layout.astro";
import Heading from "../../../components/Heading.astro";
import Recommendation from "../../../components/Recommendation.astro";
import Giscus from "../../../components/Giscus.astro";
import DetailCard from "../../../components/DetailCard.astro";
import {
  getStaticPathsLocales,
  normalizeLang,
  useTranslations,
} from "../../../utils/i18n";
import { getRecommendedGags } from "../../../utils/recommendGags";

type GagEntry = CollectionEntry<"gags">;

export async function getStaticPaths() {
  const allGags = await getCollection("gags", ({ data }: GagEntry) => {
    return data.published === true;
  });

  const paths = [];
  for (const lang of getStaticPathsLocales()) {
    for (const gag of allGags) {
      const recommendedGags = getRecommendedGags(gag, allGags, 6);
      paths.push({
        params: {
          lang,
          slug: gag.data.slug,
        },
        props: { gag, recommendedGags },
      });
    }
  }
  return paths;
}

interface Props {
  gag: GagEntry;
  recommendedGags: GagEntry[];
}

const { gag, recommendedGags }: Props = Astro.props;
const { lang: langParam } = Astro.params;
const lang = normalizeLang(langParam);
const t = useTranslations(lang);
---

<Layout title={gag.data.title} currentPage="gag" lang={lang}>
  <!-- 헤더 섹션 -->
  <section class="from-primary/5 to-background bg-gradient-to-b px-4 py-12">
    <div class="container mx-auto max-w-2xl">
      <!-- 페이지 헤딩 -->
      <Heading
        title={`😂 ${t("아재 개그", "Dad Joke")}`}
        subtitle={t(
          "유치하다고 해놓고 피식하면 지는 거다 ㅋㅋ",
          "So lame you can't help but laugh LOL",
        )}
      />

      <DetailCard gag={gag} lang={lang} />
    </div>
  </section>

  <Recommendation gags={recommendedGags} lang={lang} />

  <article class="px-4 py-8">
    <div class="container mx-auto max-w-6xl">
      <Giscus />
    </div>
  </article>
</Layout>

<script>
  import { initGagInteractions } from "../../../scripts/gagInteractions";
  import { initAnswerReveal } from "../../../scripts/answerReveal";

  // 랜덤 개그 보기 기능
  function initRandomGag() {
    const randomButton = document.querySelector(".random-gag-btn");
    if (!randomButton) return;

    randomButton.addEventListener("click", async () => {
      try {
        const response = await fetch("/api/gags.json");
        const gags = await response.json();

        if (gags.length === 0) return;

        // 현재 URL 파싱
        const pathParts = window.location.pathname
          .split("/")
          .filter((part) => part);

        let currentLang = "ko";
        let currentSlug = "";

        if (pathParts.length >= 2 && pathParts[0] === "gags") {
          // 한국어: /gags/slug
          currentLang = "ko";
          currentSlug = pathParts[1];
        } else if (pathParts.length >= 3 && pathParts[1] === "gags") {
          // 영어: /en/gags/slug
          currentLang = pathParts[0];
          currentSlug = pathParts[2];
        }

        // 현재 개그를 제외한 다른 개그들
        const otherGags = gags.filter((gag: any) => gag.slug !== currentSlug);

        if (otherGags.length === 0) return;

        // 랜덤 개그 선택
        const randomGag =
          otherGags[Math.floor(Math.random() * otherGags.length)];

        // 랜덤 개그 페이지로 이동
        // 한국어: /gags/slug, 영어: /en/gags/slug
        if (currentLang === "ko") {
          window.location.href = `/gags/${randomGag.slug}`;
        } else {
          window.location.href = `/${currentLang}/gags/${randomGag.slug}`;
        }
      } catch (error) {
        console.error("Failed to load random gag:", error);
      }
    });
  }

  // 페이지 초기화 함수
  function init() {
    initGagInteractions();
    initAnswerReveal(document, {
      typingSpeed: 60,
      showCursor: true,
      completionAnimation: true,
    });
    initRandomGag();
  }

  // Astro View Transitions 이벤트 사용
  document.addEventListener("astro:page-load", init);
</script>
