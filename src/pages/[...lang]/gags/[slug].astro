---
import { getCollection, type CollectionEntry } from "astro:content";
import questionIcon from "../../../assets/question.svg";
import answerIcon from "../../../assets/answer.svg";
import Layout from "../../../layouts/Layout.astro";
import Recommendation from "../../../components/Recommendation.astro";
import Giscus from "../../../components/Giscus.astro";
import BookmarkIcon from "../../../icons/Bookmark.astro";
import Share2Icon from "../../../icons/Share2.astro";
import {
  getStaticPathsLocales,
  normalizeLang,
  getLocalizedUrl,
  useTranslations,
} from "../../../utils/i18n";
import { getRecommendedGags } from "../../../utils/recommendGags";

type GagEntry = CollectionEntry<"gags">;

export async function getStaticPaths() {
  const allGags = await getCollection("gags", ({ data }: GagEntry) => {
    return data.published === true;
  });

  const paths = [];
  for (const lang of getStaticPathsLocales()) {
    for (const gag of allGags) {
      const recommendedGags = getRecommendedGags(gag, allGags, 6);
      paths.push({
        params: {
          lang,
          slug: gag.data.slug,
        },
        props: { gag, recommendedGags },
      });
    }
  }
  return paths;
}

interface Props {
  gag: GagEntry;
  recommendedGags: GagEntry[];
}

const { gag, recommendedGags }: Props = Astro.props;
const { lang: langParam } = Astro.params;
const lang = normalizeLang(langParam);
const t = useTranslations(lang);
---

<Layout title={gag.data.title} currentPage="gag" lang={lang}>
  <!-- 헤더 섹션 -->
  <section class="from-primary/5 to-background bg-gradient-to-b px-4 py-12">
    <div class="container mx-auto max-w-6xl">
      <!-- 카드 래퍼 -->
      <div
        class="border-border bg-card rounded-2xl border p-6 shadow-lg md:p-10"
      >
        <!-- 상단 바: 태그(좌측), 저장/공유 버튼(우측) -->
        <div class="mb-8 flex items-start justify-between gap-6">
          <!-- 태그 (좌측 상단) -->
          {
            gag.data.tags && gag.data.tags.length > 0 ? (
              <div class="flex flex-wrap gap-3">
                {gag.data.tags.map((tag: string) => (
                  <a
                    href={getLocalizedUrl(`/tags/${tag}`, lang)}
                    class="bg-primary/10 text-primary hover:bg-primary/20 inline-block rounded-full px-4 py-2 text-base font-medium transition-colors md:text-lg"
                  >
                    #{tag}
                  </a>
                ))}
              </div>
            ) : (
              <div />
            )
          }

          <!-- 저장/공유 버튼 (우측 상단) -->
          <div class="flex items-center gap-3" data-gag-slug={gag.data.slug}>
            <button
              class="save-btn hover:bg-accent rounded-md p-3 transition-colors"
              data-gag={JSON.stringify({
                slug: gag.data.slug,
                title: gag.data.title,
                description: gag.data.description,
                tags: gag.data.tags,
              })}
              aria-label={t("저장", "Save")}
            >
              <BookmarkIcon class="bookmark-icon h-6 w-6" />
              <BookmarkIcon
                class="bookmark-check-icon text-primary hidden h-6 w-6"
                fill="currentColor"
              />
            </button>
            <button
              class="share-btn hover:bg-accent rounded-md p-3 transition-colors"
              data-content={`${gag.data.title}${gag.data.description ? " - " + gag.data.description : ""}`}
              data-slug={gag.data.slug}
              aria-label={t("공유", "Share")}
            >
              <Share2Icon size={24} />
            </button>
          </div>
        </div>

        <!-- 메인 콘텐츠 (중앙 정렬) -->
        <div class="text-center">
          <div class="mb-10 flex flex-col items-center justify-center gap-8">
            <h1
              class="text-foreground text-3xl font-bold md:text-5xl"
              data-pagefind-body
            >
              {t("질문:", "Question:")}
              {gag.data.title}
            </h1>
            <div class="relative h-72 w-72 md:h-[480px] md:w-[480px]">
              <img
                src={questionIcon.src}
                alt="Question"
                class="question-icon absolute inset-0 h-full w-full transition-opacity duration-500"
              />
              {
                gag.data.description && (
                  <img
                    src={answerIcon.src}
                    alt="Answer"
                    class="answer-icon absolute inset-0 h-full w-full opacity-0 transition-opacity duration-500"
                  />
                )
              }
            </div>
          </div>
          {
            gag.data.description && (
              <div class="mb-4">
                <div class="flex flex-col items-center justify-center gap-8">
                  <p
                    class="answer-text text-foreground cursor-pointer text-3xl font-bold transition-all hover:scale-105 md:text-5xl"
                    data-answer={gag.data.description}
                    title={t("클릭하여 답변 보기", "Click to reveal answer")}
                  >
                    <span class="answer-label text-muted-foreground">
                      {t("정답:", "Answer:")}
                    </span>
                    <span class="answer-content text-muted-foreground font-mono tracking-wider">
                      {gag.data.description.replace(
                        /[가-힣ㄱ-ㅎㅏ-ㅣa-zA-Z0-9]/g,
                        "●",
                      )}
                    </span>
                  </p>
                </div>
              </div>
            )
          }
        </div>
      </div>
    </div>
  </section>

  <Recommendation gags={recommendedGags} lang={lang} />

  <article class="px-4 py-8">
    <div class="container mx-auto max-w-6xl">
      <Giscus />
    </div>
  </article>
</Layout>

<script>
  import { initGagInteractions } from "../../../scripts/gagInteractions";

  // 답변 공개 기능
  function initAnswerReveal() {
    const answerText = document.querySelector(
      ".answer-text",
    ) as HTMLParagraphElement;
    const answerLabel = document.querySelector(
      ".answer-label",
    ) as HTMLSpanElement;
    const answerContent = document.querySelector(
      ".answer-content",
    ) as HTMLSpanElement;
    const questionIcon = document.querySelector(
      ".question-icon",
    ) as HTMLImageElement;
    const answerIcon = document.querySelector(
      ".answer-icon",
    ) as HTMLImageElement;

    if (!answerText || !answerContent) {
      console.log("Answer reveal elements not found");
      return;
    }

    console.log("Answer reveal initialized");

    // 답변 텍스트 클릭 시 답변 공개
    answerText.addEventListener("click", async () => {
      console.log("Answer text clicked");
      const fullAnswer = answerText.getAttribute("data-answer");
      if (!fullAnswer) {
        console.log("No answer data found");
        return;
      }

      // 클릭 이벤트 제거 (한 번만 실행)
      answerText.style.cursor = "default";
      answerText.style.pointerEvents = "none";

      // 아이콘 전환: question → answer
      if (questionIcon && answerIcon) {
        questionIcon.style.opacity = "0";
        answerIcon.style.opacity = "1";
      }

      // 타이핑 효과
      answerContent.textContent = "";
      answerContent.classList.remove("text-muted-foreground");
      answerContent.classList.add("text-primary");

      // 레이블 색상도 변경
      if (answerLabel) {
        answerLabel.classList.remove("text-muted-foreground");
        answerLabel.classList.add("text-primary");
      }

      // 커서 깜빡임 효과 추가
      const cursor = document.createElement("span");
      cursor.className = "typing-cursor";
      cursor.textContent = "|";
      cursor.style.animation = "blink 0.7s infinite";
      answerContent.appendChild(cursor);

      // 한 글자씩 타이핑
      for (let i = 0; i < fullAnswer.length; i++) {
        await new Promise((resolve) => setTimeout(resolve, 60));
        cursor.before(fullAnswer[i]);
      }

      // 커서 제거
      cursor.remove();

      // 완료 애니메이션
      answerText.style.transform = "scale(1.02)";
      setTimeout(() => {
        answerText.style.transform = "scale(1)";
      }, 200);
    });
  }

  // 페이지 초기화 함수
  function init() {
    console.log("Page initialized");
    initGagInteractions();
    initAnswerReveal();
  }

  // Astro View Transitions 이벤트 사용
  document.addEventListener("astro:page-load", init);
</script>

<style>
  .answer-text {
    transition: transform 0.2s ease;
  }

  .reveal-answer-btn {
    transition:
      opacity 0.2s ease,
      transform 0.2s ease;
  }

  @keyframes blink {
    0%,
    50% {
      opacity: 1;
    }
    51%,
    100% {
      opacity: 0;
    }
  }
</style>
