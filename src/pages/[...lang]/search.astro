---
import Layout from "../../layouts/Layout.astro";
import Heading from "../../components/Heading.astro";
import SearchIcon from "../../icons/Search.astro";
import XIcon from "../../icons/X.astro";
import {
  getStaticPathsLocales,
  normalizeLang,
  useTranslations,
} from "../../utils/i18n";

export async function getStaticPaths() {
  return getStaticPathsLocales().map((lang) => ({
    params: { lang },
  }));
}

const { lang: langParam } = Astro.params;
const lang = normalizeLang(langParam);

const t = useTranslations(lang);

// 페이지 메타 정보
const title = t("개그 검색", "Search");
const description = t(
  "찾고 싶은 아재 개그를 검색해보세요",
  "Search for your favorite Korean puns",
);
---

<Layout
  title={title}
  description={description}
  currentPage="search"
  lang={lang}
>
  <!-- 헤더 섹션 -->
  <section
    class="from-primary/5 to-background bg-gradient-to-b px-4 py-12"
    data-pagefind-ignore
  >
    <div class="container mx-auto max-w-4xl">
      <Heading title={`🔍 ${title}`} subtitle={description} />
    </div>
  </section>

  <!-- 검색 섹션 -->
  <section class="px-4 py-8" data-pagefind-ignore>
    <div class="container mx-auto max-w-4xl">
      <!-- 검색 입력 -->
      <div class="mb-8">
        <div class="relative">
          <div
            class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-4"
          >
            <SearchIcon size={20} class="text-muted-foreground" />
          </div>
          <input
            type="text"
            id="search-input"
            class="bg-card border-border focus:ring-primary focus:border-primary text-foreground placeholder-muted-foreground w-full rounded-xl border-2 py-4 pr-12 pl-12 text-lg transition-all focus:ring-2 focus:outline-none"
            placeholder={t("개그 검색...", "Search puns...")}
            autofocus
          />
          <button
            id="clear-button"
            class="text-muted-foreground hover:text-foreground absolute inset-y-0 right-0 flex hidden items-center pr-4 transition-colors"
            aria-label={t("검색어 지우기", "Clear search")}
          >
            <XIcon size={20} />
          </button>
        </div>
        <p class="text-muted-foreground mt-2 ml-1 text-sm">
          {
            t(
              "개그 제목이나 내용으로 검색할 수 있습니다",
              "You can search by pun title or content",
            )
          }
        </p>
      </div>

      <!-- 검색 결과 -->
      <div id="search-results" class="space-y-4"></div>

      <!-- 검색 결과 없음 -->
      <div
        id="no-results"
        class="bg-card border-border hidden rounded-xl border py-12 text-center"
      >
        <div class="mb-4 text-4xl">🔍</div>
        <p class="text-muted-foreground mb-2 text-xl">
          {t("검색 결과가 없습니다", "No results found")}
        </p>
        <p class="text-muted-foreground text-sm">
          {
            t(
              "다른 키워드로 다시 검색해보세요",
              "Try searching with different keywords",
            )
          }
        </p>
      </div>
    </div>
  </section>
</Layout>

<script>
  let pagefind: any;

  // Debounce 함수
  function debounce(func: Function, wait: number) {
    let timeout: ReturnType<typeof setTimeout>;
    return function executedFunction(...args: any[]) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  function setupSearchPage() {
    // Get current language from URL
    const currentPath = window.location.pathname;
    const currentLang = currentPath.startsWith("/en/") ? "en" : "ko";

    // URL에서 검색어 가져오기
    const urlParams = new URLSearchParams(window.location.search);
    const initialQuery = urlParams.get("q") || "";

    const searchInput = document.getElementById(
      "search-input",
    ) as HTMLInputElement;
    const searchResults = document.getElementById("search-results");
    const noResults = document.getElementById("no-results");
    const clearButton = document.getElementById("clear-button");

    if (!searchInput || !searchResults || !noResults || !clearButton) return;

    // Pagefind 초기화
    async function initPagefind() {
      if (pagefind) return; // 이미 초기화되었으면 스킵

      try {
        // @ts-ignore - 동적 import를 사용하여 Vite 분석 우회
        const pagefindPath = "/pagefind/pagefind.js";
        pagefind = await import(/* @vite-ignore */ pagefindPath);

        // Set language filter for multilingual search
        if (pagefind && currentLang) {
          await pagefind.options({
            filters: {
              lang: currentLang,
            },
          });
        }
      } catch (e) {
        console.error("Pagefind not available. Run 'bun run build' first.");
      }
    }

    // Clear 버튼 표시/숨김 업데이트
    function updateClearButton() {
      if (!clearButton) return;
      if (searchInput.value.trim()) {
        clearButton.classList.remove("hidden");
      } else {
        clearButton.classList.add("hidden");
      }
    }

    // 검색 수행
    async function performSearch(query: string) {
      updateClearButton();

      if (!query.trim()) {
        if (searchResults) searchResults.innerHTML = "";
        if (noResults) noResults.classList.add("hidden");
        return;
      }

      // URL 업데이트
      const newUrl = new URL(window.location.href);
      newUrl.searchParams.set("q", query);
      window.history.replaceState({}, "", newUrl);

      if (!pagefind) {
        await initPagefind();
      }

      const search = await pagefind.search(query);

      if (!searchResults || !noResults) return;

      if (search.results.length === 0) {
        searchResults.innerHTML = "";
        noResults.classList.remove("hidden");
        return;
      }

      noResults.classList.add("hidden");

      // 결과 렌더링
      const resultsHTML = await Promise.all(
        search.results.map(async (result: any) => {
          const data = await result.data();

          // content에서 실제 개그 제목 추출 (HTML 태그 제거)
          const title = data.content || data.meta.title || "제목 없음";
          const cleanTitle = title.replace(/<[^>]*>/g, "").trim();

          // excerpt 추출 (있는 경우)
          const excerpt = data.excerpt || "";
          const cleanExcerpt = excerpt.replace(/<[^>]*>/g, "").trim();

          return `
            <a href="${data.url}" class="block p-6 bg-card border border-border rounded-lg hover:border-primary/50 hover:shadow-md transition-all duration-200 group">
              <h3 class="text-lg font-semibold text-foreground mb-2 group-hover:text-primary transition-colors">
                ${cleanTitle}
              </h3>
              ${cleanExcerpt ? `<p class="text-sm text-muted-foreground line-clamp-2">${cleanExcerpt}</p>` : ""}
            </a>
          `;
        }),
      );

      searchResults.innerHTML = resultsHTML.join("");
    }

    // 초기 검색어가 있으면 검색 수행
    if (initialQuery) {
      searchInput.value = initialQuery;
      performSearch(initialQuery);
    }

    // 이벤트 리스너 (중복 등록 방지)
    if (!(searchInput as any)._searchListenerAttached) {
      (searchInput as any)._searchListenerAttached = true;

      const debouncedSearch = debounce((e: Event) => {
        const target = e.target as HTMLInputElement;
        performSearch(target.value);
      }, 300);

      searchInput.addEventListener("input", debouncedSearch);
    }

    // Clear 버튼 클릭 이벤트 (중복 등록 방지)
    if (!(clearButton as any)._clearListenerAttached) {
      (clearButton as any)._clearListenerAttached = true;

      clearButton.addEventListener("click", () => {
        searchInput.value = "";
        searchInput.focus();
        performSearch("");
      });
    }

    // Pagefind 초기화
    initPagefind();
  }

  // astro:page-load 이벤트에 연결 (View Transitions 호환)
  document.addEventListener("astro:page-load", setupSearchPage);
</script>
