---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import BookmarkIcon from "../../icons/Bookmark.astro";
import Share2Icon from "../../icons/Share2.astro";
import {
  getLocalizedUrl,
  getStaticPathsLocales,
  normalizeLang,
} from "../../utils/i18n";

export async function getStaticPaths() {
  return getStaticPathsLocales().map((lang) => ({
    params: { lang },
  }));
}

type GagEntry = CollectionEntry<"gags">;

const { lang: langParam } = Astro.params;
const lang = normalizeLang(langParam);

// 페이지별 메시지 정의
const messages = {
  ko: {
    title: "랜덤 개그",
    subtitle: "행운의 개그를 만나보세요",
    question: "Q.",
    answer: "A.",
    save: "저장",
    share: "공유",
    backToList: "목록으로",
    nextBtn: "🎲 다음 개그",
    showAnswer: "답변 보기 👀",
    hideAnswer: "답변 숨기기 🙈",
  },
  en: {
    title: "Random Pun",
    subtitle: "Discover your lucky pun",
    question: "Q.",
    answer: "A.",
    save: "Save",
    share: "Share",
    backToList: "Back to List",
    nextBtn: "🎲 Next Pun",
    showAnswer: "Show Answer 👀",
    hideAnswer: "Hide Answer 🙈",
  },
};

const t = messages[lang as keyof typeof messages] || messages.ko;

const allGags = await getCollection("gags", ({ data }: GagEntry) => {
  return data.published === true;
});

// 랜덤 개그 선택
function getRandomGag(gags: GagEntry[]): GagEntry {
  const randomIndex = Math.floor(Math.random() * gags.length);
  return gags[randomIndex];
}

const randomGag = getRandomGag(allGags);
const spoilerId = "random-gag";

// 페이지 메타 정보
const title = t.title;
const description = t.subtitle;
---

<Layout title={title} description={description} currentPage="random">
  <!-- 헤더 섹션 -->
  <section class="from-primary/5 to-background bg-gradient-to-b px-4 py-12">
    <div class="container mx-auto max-w-4xl text-center">
      <h2 class="text-foreground mb-3 text-3xl font-bold md:text-4xl">
        🎲 {title}
      </h2>
      <p class="text-muted-foreground text-lg">
        {description}
      </p>
    </div>
  </section>

  <!-- 랜덤 개그 섹션 -->
  <section class="px-4 py-8">
    <div class="container mx-auto max-w-4xl">
      <div
        class="card bg-card border-border rounded-lg border"
        data-gag-slug={randomGag.data.slug}
      >
        <div class="p-6 md:p-8">
          <div class="mb-4 flex items-start justify-between">
            <div class="flex flex-wrap gap-2">
              {
                randomGag.data.tags.map((tag: string) => (
                  <a
                    href={getLocalizedUrl(`/tags/${tag}`, lang)}
                    class="bg-primary/10 text-primary hover:bg-primary/20 inline-block rounded-full px-3 py-1 text-sm font-medium transition-colors"
                  >
                    #{tag}
                  </a>
                ))
              }
              <span
                class="inline-block rounded-full px-3 py-1 text-sm font-medium"
                class:list={[
                  randomGag.data.lang === "ko"
                    ? "bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300"
                    : "bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300",
                ]}
              >
                {randomGag.data.lang === "ko" ? "🇰🇷 한국어" : "🇺🇸 English"}
              </span>
            </div>
            <div class="flex items-center space-x-2">
              <button
                class="save-btn hover:bg-accent rounded-md p-2 transition-colors"
                data-gag={JSON.stringify({
                  slug: randomGag.data.slug,
                  title: randomGag.data.title,
                  description: randomGag.data.description,
                  tags: randomGag.data.tags,
                })}
                aria-label={t.save}
              >
                <BookmarkIcon class="bookmark-icon h-4 w-4" />
                <BookmarkIcon
                  class="bookmark-check-icon text-primary hidden h-4 w-4"
                  fill="currentColor"
                />
              </button>
              <button
                class="share-btn hover:bg-accent rounded-md p-2 transition-colors"
                data-content={`${randomGag.data.title}${randomGag.data.description ? " - " + randomGag.data.description : ""}`}
                data-slug={randomGag.data.slug}
                aria-label={t.share}
              >
                <Share2Icon size={16} />
              </button>
            </div>
          </div>

          <div class="mb-6">
            <h3 class="text-foreground mb-4 text-xl font-bold md:text-2xl">
              {t.question}
              {randomGag.data.title}
            </h3>

            {
              randomGag.data.description && (
                <div class="spoiler-container">
                  <button
                    id={spoilerId}
                    class="spoiler-btn bg-muted hover:bg-muted-foreground/20 text-muted-foreground rounded px-3 py-1 text-sm transition-colors"
                    data-spoiler-id={spoilerId}
                  >
                    {t.showAnswer}
                  </button>
                  <p
                    id={`${spoilerId}-content`}
                    class="spoiler-content text-foreground mt-3 hidden text-lg md:text-xl"
                  >
                    {t.answer} {randomGag.data.description}
                  </p>
                </div>
              )
            }
          </div>

          <div class="text-center">
            <a
              href={getLocalizedUrl(`/gags/${randomGag.data.slug}`, lang)}
              class="text-muted-foreground hover:text-primary inline-flex items-center text-sm transition-colors"
            >
              {t.backToList}
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="ml-1"
              >
                <path d="M5 12h14"></path>
                <path d="m12 5 7 7-7 7"></path>
              </svg>
            </a>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- 액션 버튼들 -->
  <div class="px-4 py-8 text-center">
    <button
      type="button"
      class="bg-primary text-primary-foreground hover:bg-primary/90 rounded-lg px-8 py-3 text-lg font-medium shadow-md transition-colors hover:shadow-lg"
      onclick="window.location.reload()"
    >
      {t.nextBtn}
    </button>
  </div>
</Layout>

<script>
  // localStorage 키
  const STORAGE_KEY = "ajae-gag-saved";

  // 저장된 개그 가져오기
  function getSavedGags(): any[] {
    const saved = localStorage.getItem(STORAGE_KEY);
    return saved ? JSON.parse(saved) : [];
  }

  // 개그 저장/제거
  function toggleSaveGag(gag: any): boolean {
    const saved = getSavedGags();
    const index = saved.findIndex((item: any) => item.slug === gag.slug);

    if (index > -1) {
      saved.splice(index, 1);
    } else {
      saved.push(gag);
    }

    localStorage.setItem(STORAGE_KEY, JSON.stringify(saved));
    return index === -1;
  }

  // 개그가 저장되었는지 확인
  function isGagSaved(gagSlug: string): boolean {
    const saved = getSavedGags();
    return saved.some((gag: any) => gag.slug === gagSlug);
  }

  // UI 업데이트
  function updateSaveButtons(): void {
    document.querySelectorAll(".save-btn").forEach((btn: Element) => {
      const htmlBtn = btn as HTMLElement;
      const gag = JSON.parse(htmlBtn.dataset.gag || "{}");
      const bookmarkIcon = btn.querySelector(".bookmark-icon");
      const bookmarkCheckIcon = btn.querySelector(".bookmark-check-icon");

      if (isGagSaved(gag.slug)) {
        bookmarkIcon?.classList.add("hidden");
        bookmarkCheckIcon?.classList.remove("hidden");
      } else {
        bookmarkIcon?.classList.remove("hidden");
        bookmarkCheckIcon?.classList.add("hidden");
      }
    });
  }

  // 스포일러 토글
  function setupSpoilers(): void {
    // Get current language from URL
    const currentPath = window.location.pathname;
    const currentLang = currentPath.startsWith("/en/") ? "en" : "ko";
    const showText = currentLang === "ko" ? "답변 보기 👀" : "Show Answer 👀";
    const hideText = currentLang === "ko" ? "답변 숨기기 🙈" : "Hide Answer 🙈";

    document.querySelectorAll(".spoiler-btn").forEach((btn) => {
      btn.addEventListener("click", (e) => {
        e.preventDefault();
        const spoilerId = (btn as HTMLElement).dataset.spoilerId;
        const content = document.getElementById(`${spoilerId}-content`);

        if (content) {
          content.classList.toggle("hidden");
          btn.textContent = content.classList.contains("hidden")
            ? showText
            : hideText;
        }
      });
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    updateSaveButtons();
    setupSpoilers();

    // 저장 버튼 이벤트
    document.querySelectorAll(".save-btn").forEach((btn: Element) => {
      btn.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        const htmlBtn = btn as HTMLElement;
        const gag = JSON.parse(htmlBtn.dataset.gag || "{}");
        toggleSaveGag(gag);
        updateSaveButtons();
      });
    });

    // 공유 버튼 이벤트
    document.querySelectorAll(".share-btn").forEach((btn: Element) => {
      btn.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        const htmlBtn = btn as HTMLElement;
        const content = htmlBtn.dataset.content || "";
        const slug = htmlBtn.dataset.slug || "";
        const url = `${window.location.origin}/gags/${slug}`;

        if (navigator.share) {
          navigator.share({
            title: "아재개그",
            text: content,
            url: url,
          });
        } else {
          navigator.clipboard.writeText(`${content}\n${url}`).then(() => {
            const originalHtml = htmlBtn.innerHTML;
            htmlBtn.innerHTML = "✓";
            setTimeout(() => {
              htmlBtn.innerHTML = originalHtml;
            }, 1000);
          });
        }
      });
    });

    // storage 이벤트 리스너
    window.addEventListener("storage", (e: StorageEvent) => {
      if (e.key === STORAGE_KEY) {
        updateSaveButtons();
      }
    });
  });
</script>
