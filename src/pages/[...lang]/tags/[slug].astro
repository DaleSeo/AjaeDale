---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../../../layouts/Layout.astro";
import Card from "../../../components/Card.astro";
import { tagToSlug } from "../../../utils/tagUtils";
import { getStaticPathsLocales, normalizeLang } from "../../../utils/i18n";

type GagEntry = CollectionEntry<"gags">;

export async function getStaticPaths() {
  const allGags = await getCollection("gags", ({ data }: GagEntry) => {
    return data.published === true;
  });

  const paths = [];

  for (const lang of getStaticPathsLocales()) {
    const allTags = new Set<string>();
    allGags.forEach((gag: GagEntry) => {
      gag.data.tags.forEach((tag: string) => {
        allTags.add(tag);
      });
    });

    for (const tag of allTags) {
      paths.push({
        params: {
          lang,
          slug: tagToSlug(tag),
        },
        props: {
          tag,
          gags: allGags.filter((gag: GagEntry) => {
            return gag.data.tags.includes(tag);
          }),
        },
      });
    }
  }

  return paths;
}

type Props = {
  tag: string;
  gags: GagEntry[];
};

const { tag, gags } = Astro.props as Props;
const { lang: langParam } = Astro.params;
const lang = normalizeLang(langParam);

// 페이지별 메시지 정의
const messages = {
  ko: {
    filterByTag: "#{tag} 개그 모음",
    totalGags: "총 {count}개의 개그",
    tagDescriptionPrefix: "이 태그가 포함된 개그",
    tagDescriptionSuffix: "개",
  },
  en: {
    filterByTag: "#{tag} Puns",
    totalGags: "{count} puns in total",
    tagDescriptionPrefix: "",
    tagDescriptionSuffix: "puns with this tag",
  },
};

const t = messages[lang as keyof typeof messages] || messages.ko;

// SEO를 위한 메타 데이터
const pageTitle = t.filterByTag.replace("{tag}", tag);
const pageDescription = t.totalGags.replace("{count}", String(gags.length));
---

<Layout
  title={pageTitle}
  description={pageDescription}
  currentPage="tag"
  lang={lang}
>
  <div class="container mx-auto px-4 py-8">
    <!-- 태그 헤더 -->
    <section class="mb-8" data-pagefind-ignore>
      <h1 class="text-foreground mb-2 text-3xl font-bold">#{tag}</h1>
      <p class="text-muted-foreground">
        {t.tagDescriptionPrefix}
        <strong>{gags.length}</strong>{t.tagDescriptionSuffix}
      </p>
    </section>

    <!-- 개그 목록 -->
    <section class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
      {gags.map((gag: GagEntry) => <Card gag={gag} lang={lang} />)}
    </section>
  </div>
</Layout>
