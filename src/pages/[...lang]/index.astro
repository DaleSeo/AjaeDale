---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import Card from "../../components/Card.astro";
import BookmarkIcon from "../../icons/Bookmark.astro";
import Share2Icon from "../../icons/Share2.astro";
import { enrichGagsWithLikes } from "../../utils/discussionsApi";
import { sortGagsByPopularity } from "../../utils/popularityUtils";
import {
  getLocalizedUrl,
  getStaticPathsLocales,
  normalizeLang,
} from "../../utils/i18n";

export async function getStaticPaths() {
  return getStaticPathsLocales().map((lang) => ({
    params: { lang },
  }));
}

type GagEntry = CollectionEntry<"gags">;

const { lang: langParam } = Astro.params;
const lang = normalizeLang(langParam);

const allGags = await getCollection("gags", ({ data }: GagEntry) => {
  return data.published === true;
});

// Ïò§ÎäòÏùò Í∞úÍ∑∏ ÏÑ†ÌÉù (ÎÇ†Ïßú Í∏∞Î∞òÏúºÎ°ú ÏùºÍ¥ÄÎêú ÏÑ†ÌÉù)
function getTodaysGag(gags: GagEntry[]): GagEntry {
  const today = new Date();
  const dayOfYear = Math.floor(
    (today.getTime() - new Date(today.getFullYear(), 0, 0).getTime()) /
      (1000 * 60 * 60 * 24),
  );
  const index = dayOfYear % gags.length;
  return gags[index];
}

const todaysGag = getTodaysGag(allGags);

// Ïù∏Í∏∞ Í∞úÍ∑∏ Í∞ÄÏ†∏Ïò§Í∏∞
const gagsWithLikesData = await enrichGagsWithLikes(allGags);
const popularGags = sortGagsByPopularity(gagsWithLikesData);
const topPopularGags = popularGags.slice(0, 6);

const totalGagsCount = allGags.length;

// ÌéòÏù¥ÏßÄÎ≥Ñ Î©îÏãúÏßÄ Ï†ïÏùò
const messages = {
  title: { ko: "Ìôà", en: "Home" },
  "home.title": { ko: "ÏïÑÏû¨Îã¨Î†à", en: "AjaeDale" },
  "hero.description": {
    ko: "Îß§Ïùº ÏÉàÎ°úÏö¥ ÏïÑÏû¨Í∞úÍ∑∏Î•º ÎßåÎÇòÎ≥¥ÏÑ∏Ïöî. Ïû¨ÎØ∏ÏûàÎäî Í∞úÍ∑∏Î∂ÄÌÑ∞ Ìô©ÎãπÌïú Í∞úÍ∑∏ÍπåÏßÄ!",
    en: "Discover new Korean puns every day. From hilarious to absurd!",
  },
  "today.title": { ko: "Ïò§ÎäòÏùò Í∞úÍ∑∏", en: "Today's Pun" },
  "today.subtitle": {
    ko: "Îß§Ïùº Î∞îÎÄåÎäî ÌäπÎ≥ÑÌïú Í∞úÍ∑∏Î•º ÎßåÎÇòÎ≥¥ÏÑ∏Ïöî",
    en: "Discover a special pun that changes daily",
  },
  "today.badge": { ko: "TODAY", en: "TODAY" },
  "today.viewMore": { ko: "ÏûêÏÑ∏Ìûà Î≥¥Í∏∞", en: "View More" },
  "popular.title": { ko: "Ïù∏Í∏∞ ÏïÑÏû¨Í∞úÍ∑∏", en: "Popular Puns" },
  "popular.subtitle": {
    ko: "Í∞ÄÏû• ÎßéÏùÄ ÏÇ¨ÎûëÏùÑ Î∞õÍ≥† ÏûàÎäî Í∞úÍ∑∏Îì§Ïù¥ÏóêÏöî",
    en: "The most loved puns by our community",
  },
  "popular.viewMore": { ko: "Ïù∏Í∏∞ Í∞úÍ∑∏ ÎçîÎ≥¥Í∏∞", en: "View More Popular Puns" },
  "stats.total": {
    ko: "Ï¥ù {count}Í∞úÏùò Ïû¨ÎØ∏ÏûàÎäî Í∞úÍ∑∏Í∞Ä Í∏∞Îã§Î¶¨Í≥† ÏûàÏñ¥Ïöî!",
    en: "{count} funny puns waiting for you!",
  },
  "stats.randomBtn": { ko: "üé≤ ÎûúÎç§ Í∞úÍ∑∏ Î≥¥Í∏∞", en: "üé≤ Random Pun" },
  "stats.searchBtn": { ko: "üîç Í∞úÍ∑∏ Í≤ÄÏÉâÌïòÍ∏∞", en: "üîç Search Puns" },
  "gag.question": { ko: "Q.", en: "Q." },
  "gag.answer": { ko: "A.", en: "A." },
  "gag.save": { ko: "Ï†ÄÏû•", en: "Save" },
  "gag.share": { ko: "Í≥µÏú†", en: "Share" },
};

const t = (key: string) =>
  (messages as Record<string, Record<string, string>>)[key]?.[lang] ||
  (messages as Record<string, Record<string, string>>)[key]?.ko ||
  "";
---

<Layout
  title={t("title")}
  description={t("hero.description")}
  currentPage="home"
  lang={lang}
>
  <!-- Ìó§Îçî ÏÑπÏÖò -->
  <section class="px-4 py-12 text-center">
    <div class="container mx-auto max-w-3xl">
      <h1 class="text-foreground mb-4 text-5xl font-bold md:text-6xl">
        {t("home.title")}
      </h1>
      <p class="text-muted-foreground text-lg">
        {t("hero.description")}
      </p>
    </div>
  </section>

  <!-- Ïò§ÎäòÏùò Í∞úÍ∑∏ ÏÑπÏÖò -->
  <section class="from-primary/5 to-background bg-gradient-to-b px-4 py-16">
    <div class="container mx-auto max-w-4xl">
      <div class="mb-8 text-center">
        <h2 class="text-foreground mb-2 text-3xl font-bold">
          ‚ú® {t("today.title")}
        </h2>
        <p class="text-muted-foreground">
          {t("today.subtitle")}
        </p>
      </div>

      <div
        class="from-primary/10 via-background to-primary/5 border-primary/20 rounded-2xl border-2 bg-gradient-to-br p-8 shadow-lg transition-all duration-300 hover:shadow-xl md:p-12"
      >
        <div class="mb-6 flex items-start justify-between">
          <div class="flex items-center gap-3">
            {
              todaysGag.data.tags.length > 0 && (
                <span class="bg-primary text-primary-foreground inline-block rounded-full px-4 py-2 text-sm font-bold shadow-md">
                  #{todaysGag.data.tags[0]}
                </span>
              )
            }
            <span
              class="inline-block rounded-full px-3 py-1 text-sm font-medium"
              class:list={[
                todaysGag.data.lang === "ko"
                  ? "bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300"
                  : "bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300",
              ]}
            >
              {todaysGag.data.lang === "ko" ? "üá∞üá∑ ÌïúÍµ≠Ïñ¥" : "üá∫üá∏ English"}
            </span>
            <span
              class="inline-block animate-pulse rounded-full bg-yellow-400 px-3 py-1 text-xs font-bold text-yellow-900"
            >
              {t("today.badge")}
            </span>
          </div>
          <div class="flex items-center space-x-2">
            <button
              class="save-btn hover:bg-background/50 rounded-lg p-3 transition-colors"
              data-gag={JSON.stringify({
                slug: todaysGag.data.slug,
                title: todaysGag.data.title,
                description: todaysGag.data.description,
              })}
              aria-label={t("gag.save")}
            >
              <BookmarkIcon class="bookmark-icon h-6 w-6" />
              <BookmarkIcon
                class="bookmark-check-icon text-primary hidden h-6 w-6"
                fill="currentColor"
              />
            </button>
            <button
              class="share-btn hover:bg-background/50 rounded-lg p-3 transition-colors"
              data-content={`${todaysGag.data.title}${todaysGag.data.description ? " - " + todaysGag.data.description : ""}`}
              data-slug={todaysGag.data.slug}
              aria-label={t("gag.share")}
            >
              <Share2Icon size={24} />
            </button>
          </div>
        </div>

        <div class="mb-6 text-center">
          <h3 class="text-foreground mb-3 text-xl font-bold md:text-2xl">
            {t("gag.question")}
            {todaysGag.data.title}
          </h3>
          {
            todaysGag.data.description && (
              <p class="text-foreground text-lg md:text-xl">
                {t("gag.answer")} {todaysGag.data.description}
              </p>
            )
          }
        </div>

        <div class="mt-6 text-center">
          <a
            href={getLocalizedUrl(`/gags/${todaysGag.data.slug}`, lang)}
            class="bg-primary text-primary-foreground hover:bg-primary/90 inline-flex items-center rounded-lg px-6 py-3 font-medium transition-colors"
          >
            {t("today.viewMore")}
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="18"
              height="18"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="ml-2"
            >
              <path d="M5 12h14"></path>
              <path d="m12 5 7 7-7 7"></path>
            </svg>
          </a>
        </div>
      </div>
    </div>
  </section>

  <!-- Ïù∏Í∏∞ Í∞úÍ∑∏ ÏÑπÏÖò -->
  <section class="px-4 py-16">
    <div class="container mx-auto max-w-6xl">
      <div class="mb-12 text-center">
        <h2 class="text-foreground mb-2 text-3xl font-bold">
          üî• {t("popular.title")}
        </h2>
        <p class="text-muted-foreground">
          {t("popular.subtitle")}
        </p>
      </div>

      <div class="mb-8 grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
        {topPopularGags.map((gag) => <Card gag={gag} lang={lang} />)}
      </div>

      <div class="text-center">
        <a
          href={getLocalizedUrl("/popular", lang)}
          class="border-border hover:bg-accent inline-flex items-center rounded-lg border px-6 py-3 transition-colors"
        >
          {t("popular.viewMore")}
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="18"
            height="18"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="ml-2"
          >
            <path d="M5 12h14"></path>
            <path d="m12 5 7 7-7 7"></path>
          </svg>
        </a>
      </div>
    </div>
  </section>

  <!-- ÌÜµÍ≥Ñ ÏÑπÏÖò -->
  <section class="from-background to-primary/5 bg-gradient-to-b px-4 py-16">
    <div class="container mx-auto text-center">
      <p class="text-muted-foreground mb-8 text-xl">
        {t("stats.total").replace("{count}", String(totalGagsCount))}
      </p>
    </div>

    <div class="flex flex-col items-center justify-center gap-4 sm:flex-row">
      <a
        href={getLocalizedUrl("/random", lang)}
        class="bg-primary text-primary-foreground hover:bg-primary/90 rounded-lg px-8 py-3 text-lg font-medium shadow-md transition-colors hover:shadow-lg"
      >
        {t("stats.randomBtn")}
      </a>
      <a
        href={getLocalizedUrl("/search", lang)}
        class="border-border hover:bg-accent rounded-lg border px-8 py-3 text-lg font-medium shadow-sm transition-colors hover:shadow-md"
      >
        {t("stats.searchBtn")}
      </a>
    </div>
  </section>
</Layout>

<script>
  // localStorage ÌÇ§
  const STORAGE_KEY = "ajae-gag-saved";

  // Ï†ÄÏû•Îêú Í∞úÍ∑∏ Í∞ÄÏ†∏Ïò§Í∏∞
  function getSavedGags(): any[] {
    const saved = localStorage.getItem(STORAGE_KEY);
    return saved ? JSON.parse(saved) : [];
  }

  // Í∞úÍ∑∏ Ï†ÄÏû•/Ï†úÍ±∞
  function toggleSaveGag(gag: any): boolean {
    const saved = getSavedGags();
    const index = saved.findIndex((item: any) => item.slug === gag.slug);

    if (index > -1) {
      saved.splice(index, 1);
    } else {
      saved.push(gag);
    }

    localStorage.setItem(STORAGE_KEY, JSON.stringify(saved));
    return index === -1;
  }

  // Í∞úÍ∑∏Í∞Ä Ï†ÄÏû•ÎêòÏóàÎäîÏßÄ ÌôïÏù∏
  function isGagSaved(gagSlug: string): boolean {
    const saved = getSavedGags();
    return saved.some((gag: any) => gag.slug === gagSlug);
  }

  // UI ÏóÖÎç∞Ïù¥Ìä∏
  function updateSaveButtons(): void {
    document.querySelectorAll(".save-btn").forEach((btn: Element) => {
      const htmlBtn = btn as HTMLElement;
      const gag = JSON.parse(htmlBtn.dataset.gag || "{}");
      const bookmarkIcon = btn.querySelector(".bookmark-icon");
      const bookmarkCheckIcon = btn.querySelector(".bookmark-check-icon");

      if (isGagSaved(gag.slug)) {
        bookmarkIcon?.classList.add("hidden");
        bookmarkCheckIcon?.classList.remove("hidden");
      } else {
        bookmarkIcon?.classList.remove("hidden");
        bookmarkCheckIcon?.classList.add("hidden");
      }
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    // Ï¥àÍ∏∞ ÏÉÅÌÉú ÏÑ§Ï†ï
    updateSaveButtons();

    // Ï†ÄÏû• Î≤ÑÌäº Ïù¥Î≤§Ìä∏
    document.querySelectorAll(".save-btn").forEach((btn: Element) => {
      btn.addEventListener("click", (e) => {
        e.preventDefault();
        const htmlBtn = btn as HTMLElement;
        const gag = JSON.parse(htmlBtn.dataset.gag || "{}");
        toggleSaveGag(gag);
        updateSaveButtons();
      });
    });

    // Í≥µÏú† Î≤ÑÌäº Ïù¥Î≤§Ìä∏
    document.querySelectorAll(".share-btn").forEach((btn: Element) => {
      btn.addEventListener("click", (e) => {
        e.preventDefault();
        const htmlBtn = btn as HTMLElement;
        const content = htmlBtn.dataset.content || "";
        const slug = htmlBtn.dataset.slug || "";
        const url = `${window.location.origin}/gags/${slug}`;

        if (navigator.share) {
          navigator.share({
            title: "Ïò§ÎäòÏùò ÏïÑÏû¨Í∞úÍ∑∏",
            text: content,
            url: url,
          });
        } else {
          navigator.clipboard.writeText(`${content}\n${url}`).then(() => {
            const originalHtml = htmlBtn.innerHTML;
            htmlBtn.innerHTML = "‚úì";
            setTimeout(() => {
              htmlBtn.innerHTML = originalHtml;
            }, 1000);
          });
        }
      });
    });

    // storage Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
    window.addEventListener("storage", (e: StorageEvent) => {
      if (e.key === STORAGE_KEY) {
        updateSaveButtons();
      }
    });
  });
</script>
