---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import Card from "../../components/Card.astro";
import DailyGag from "../../components/DailyGag.astro";
import { enrichGagsWithLikes } from "../../utils/discussionsApi";
import { sortGagsByPopularity } from "../../utils/popularityUtils";
import {
  getLocalizedUrl,
  getStaticPathsLocales,
  normalizeLang,
  useTranslations,
} from "../../utils/i18n";

export async function getStaticPaths() {
  return getStaticPathsLocales().map((lang) => ({
    params: { lang },
  }));
}

type GagEntry = CollectionEntry<"gags">;

const { lang: langParam } = Astro.params;
const lang = normalizeLang(langParam);

const allGags = await getCollection("gags", ({ data }: GagEntry) => {
  return data.published === true;
});

// 오늘의 개그 선택 (날짜 기반으로 일관된 선택)
function getTodaysGag(gags: GagEntry[]): GagEntry {
  const today = new Date();
  const dayOfYear = Math.floor(
    (today.getTime() - new Date(today.getFullYear(), 0, 0).getTime()) /
      (1000 * 60 * 60 * 24),
  );
  const index = dayOfYear % gags.length;
  return gags[index];
}

const todaysGag = getTodaysGag(allGags);

// 인기 개그 가져오기
const gagsWithLikesData = await enrichGagsWithLikes(allGags);
const popularGags = sortGagsByPopularity(gagsWithLikesData);
const topPopularGags = popularGags.slice(0, 6);

const totalGagsCount = allGags.length;

const t = useTranslations(lang);
---

<Layout title={t("홈", "Home")} currentPage="home" lang={lang}>
  <!-- 오늘의 개그 섹션 -->
  <DailyGag gag={todaysGag} lang={lang} />

  <!-- 인기 개그 섹션 -->
  <section class="px-4 py-16">
    <div class="container mx-auto max-w-6xl">
      <div class="mb-12 text-center">
        <h2 class="text-foreground mb-2 text-3xl font-bold">
          🔥 {t("인기 아재개그", "Popular Puns")}
        </h2>
        <p class="text-muted-foreground">
          {
            t(
              "가장 많은 사랑을 받고 있는 개그들이에요",
              "The most loved puns by our community",
            )
          }
        </p>
      </div>

      <div class="mb-8 grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
        {topPopularGags.map((gag) => <Card gag={gag} lang={lang} />)}
      </div>

      <div class="text-center">
        <a
          href={getLocalizedUrl("/popular", lang)}
          class="border-border hover:bg-accent inline-flex items-center rounded-lg border px-6 py-3 transition-colors"
        >
          {t("인기 개그 더보기", "View More Popular Puns")}
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="18"
            height="18"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="ml-2"
          >
            <path d="M5 12h14"></path>
            <path d="m12 5 7 7-7 7"></path>
          </svg>
        </a>
      </div>
    </div>
  </section>

  <!-- 통계 섹션 -->
  <section class="from-background to-primary/5 bg-gradient-to-b px-4 py-16">
    <div class="container mx-auto text-center">
      <p class="text-muted-foreground mb-8 text-xl">
        {
          t(
            `총 ${totalGagsCount}개의 재미있는 개그가 기다리고 있어요!`,
            `${totalGagsCount} funny puns waiting for you!`,
          )
        }
      </p>
    </div>

    <div class="flex flex-col items-center justify-center gap-4 sm:flex-row">
      <a
        href={getLocalizedUrl("/random", lang)}
        class="bg-primary text-primary-foreground hover:bg-primary/90 rounded-lg px-8 py-3 text-lg font-medium shadow-md transition-colors hover:shadow-lg"
      >
        {t("🎲 랜덤 개그 보기", "🎲 Random Pun")}
      </a>
      <a
        href={getLocalizedUrl("/search", lang)}
        class="border-border hover:bg-accent rounded-lg border px-8 py-3 text-lg font-medium shadow-sm transition-colors hover:shadow-md"
      >
        {t("🔍 개그 검색하기", "🔍 Search Puns")}
      </a>
    </div>
  </section>
</Layout>

<script>
  // localStorage 키
  const STORAGE_KEY = "ajae-gag-saved";

  // 저장된 개그 가져오기
  function getSavedGags(): any[] {
    const saved = localStorage.getItem(STORAGE_KEY);
    return saved ? JSON.parse(saved) : [];
  }

  // 개그 저장/제거
  function toggleSaveGag(gag: any): boolean {
    const saved = getSavedGags();
    const index = saved.findIndex((item: any) => item.slug === gag.slug);

    if (index > -1) {
      saved.splice(index, 1);
    } else {
      saved.push(gag);
    }

    localStorage.setItem(STORAGE_KEY, JSON.stringify(saved));
    return index === -1;
  }

  // 개그가 저장되었는지 확인
  function isGagSaved(gagSlug: string): boolean {
    const saved = getSavedGags();
    return saved.some((gag: any) => gag.slug === gagSlug);
  }

  // UI 업데이트
  function updateSaveButtons(): void {
    document.querySelectorAll(".save-btn").forEach((btn: Element) => {
      const htmlBtn = btn as HTMLElement;
      const gag = JSON.parse(htmlBtn.dataset.gag || "{}");
      const bookmarkIcon = btn.querySelector(".bookmark-icon");
      const bookmarkCheckIcon = btn.querySelector(".bookmark-check-icon");

      if (isGagSaved(gag.slug)) {
        bookmarkIcon?.classList.add("hidden");
        bookmarkCheckIcon?.classList.remove("hidden");
      } else {
        bookmarkIcon?.classList.remove("hidden");
        bookmarkCheckIcon?.classList.add("hidden");
      }
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    // 초기 상태 설정
    updateSaveButtons();

    // 저장 버튼 이벤트
    document.querySelectorAll(".save-btn").forEach((btn: Element) => {
      btn.addEventListener("click", (e) => {
        e.preventDefault();
        const htmlBtn = btn as HTMLElement;
        const gag = JSON.parse(htmlBtn.dataset.gag || "{}");
        toggleSaveGag(gag);
        updateSaveButtons();
      });
    });

    // 공유 버튼 이벤트
    document.querySelectorAll(".share-btn").forEach((btn: Element) => {
      btn.addEventListener("click", (e) => {
        e.preventDefault();
        const htmlBtn = btn as HTMLElement;
        const content = htmlBtn.dataset.content || "";
        const slug = htmlBtn.dataset.slug || "";
        const url = `${window.location.origin}/gags/${slug}`;

        if (navigator.share) {
          navigator.share({
            title: "오늘의 아재개그",
            text: content,
            url: url,
          });
        } else {
          navigator.clipboard.writeText(`${content}\n${url}`).then(() => {
            const originalHtml = htmlBtn.innerHTML;
            htmlBtn.innerHTML = "✓";
            setTimeout(() => {
              htmlBtn.innerHTML = originalHtml;
            }, 1000);
          });
        }
      });
    });

    // storage 이벤트 리스너
    window.addEventListener("storage", (e: StorageEvent) => {
      if (e.key === STORAGE_KEY) {
        updateSaveButtons();
      }
    });
  });
</script>
