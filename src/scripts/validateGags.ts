import { readdirSync, readFileSync } from "fs";
import { join } from "path";

/**
 * Í∞úÍ∑∏ Ïª¨Î†âÏÖòÏùò Ï§ëÎ≥µÏùÑ Í≤ÄÏ¶ùÌïòÎäî Ïä§ÌÅ¨Î¶ΩÌä∏
 * - title Ï§ëÎ≥µ Í≤ÄÏÇ¨
 * - slug Ï§ëÎ≥µ Í≤ÄÏÇ¨
 * - ÎπåÎìú Ï†Ñ/Í∞úÎ∞ú ÏÑúÎ≤Ñ ÏãúÏûë Ï†Ñ Ïã§Ìñâ
 */

function validateGags() {
  console.log("üîç Validating gag collection...\n");

  const gagsDir = join(process.cwd(), "src/content/gags");
  const files = readdirSync(gagsDir).filter((f) => f.endsWith(".json"));

  const titles = new Map<string, string>();
  const slugs = new Map<string, string>();

  let hasErrors = false;

  files.forEach((file) => {
    const content = readFileSync(join(gagsDir, file), "utf-8");
    const gag = JSON.parse(content);

    // Title Ï§ëÎ≥µ Í≤ÄÏÇ¨
    const existingTitleFile = titles.get(gag.title);
    if (existingTitleFile) {
      console.error(`‚ùå Duplicate title found: "${gag.title}"`);
      console.error(`   Conflict between:`);
      console.error(`   - ${existingTitleFile}`);
      console.error(`   - ${file}`);
      console.error("");
      hasErrors = true;
    } else {
      titles.set(gag.title, file);
    }

    // Slug Ï§ëÎ≥µ Í≤ÄÏÇ¨
    const existingSlugFile = slugs.get(gag.slug);
    if (existingSlugFile) {
      console.error(`‚ùå Duplicate slug found: "${gag.slug}"`);
      console.error(`   Conflict between:`);
      console.error(`   - ${existingSlugFile}`);
      console.error(`   - ${file}`);
      console.error("");
      hasErrors = true;
    } else {
      slugs.set(gag.slug, file);
    }
  });

  if (hasErrors) {
    console.error("üí• Validation failed! Fix duplicates before proceeding.\n");
    process.exit(1);
  } else {
    console.log(`‚úÖ All ${files.length} gags validated successfully!`);
    console.log(`   - ${titles.size} unique titles`);
    console.log(`   - ${slugs.size} unique slugs\n`);
  }
}

try {
  validateGags();
} catch (error) {
  console.error("‚ùå Validation script failed:", error);
  process.exit(1);
}
